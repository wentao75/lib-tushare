{"version":3,"file":"tushare.js","sources":["src/tushare.js"],"sourcesContent":["/* eslint-disable camelcase */\nconst axios = require(\"axios\");\nconst _ = require(\"lodash\");\nconst moment = require(\"moment\");\nconst FlowControl = require(\"@wt/lib-flowcontrol\");\nconst pino = require(\"pino\");\n\nconst logger = pino({\n    level: process.env.LOGGER || \"info\",\n    prettyPrint: {\n        levelFirst: true,\n        translateTime: \"SYS:yyyy-mm-dd HH:MM:ss.l\",\n        crlf: true,\n    },\n    prettifier: require(\"pino-pretty\"),\n});\n\n// const token = \"\"\nconst tushareUrl = \"http://api.waditu.com\";\n// 增加一个 fieldNames用来给出每个字段（包括输入/输出的说明）\nconst fieldNames = {\n    is_hs: \"是否沪深港通标的，N否 H沪股通 S深股通\",\n    list_status: \"上市状态： L上市 D退市 P暂停上市\",\n    exchange: \"交易所代码 SSE上交所 SZSE深交所 HKEX港交所(未上线)\",\n    ts_code: \"TS代码\",\n    symbol: \"股票代码\",\n    name: \"股票名称\",\n    area: \"所在地域\",\n    industry: \"所属行业\",\n    fullname: \"股票全称\",\n    enname: \"英文全称\",\n    market: \"市场类型 （主板/中小板/创业板/科创板）\",\n    curr_type: \"交易货币\",\n    list_date: \"上市日期\",\n    delist_date: \"退市日期\",\n    start_date: \"开始日期\",\n    end_date: \"结束日期\",\n    is_open: \"是否交易 0 休市 1交易\",\n    cal_date: \"日历日期\",\n    pretrade_date: \"上一个交易日\",\n    ann_date: \"公告日期（YYYYMMDD格式）\",\n    change_reason: \"变更原因\",\n\n    chairman: \"法人代表\",\n    manager: \"总经理\",\n    secretary: \"董秘\",\n    reg_capital: \"注册资本\",\n    setup_date: \"注册日期\",\n    province: \"所在省份\",\n    city: \"所在城市\",\n    introduction: \"公司介绍\",\n    website: \"公司主页\",\n    email: \"电子邮件\",\n    office: \"办公室\",\n    employees: \"员工人数\",\n    main_business: \"主要业务及产品\",\n    business_scope: \"经营范围\",\n    gender: \"性别\",\n    lev: \"岗位类别\",\n    title: \"岗位\",\n    edu: \"学历\",\n    national: \"国籍\",\n    birthday: \"出生年月\",\n    begin_date: \"上任日期\",\n    // end_date: '离任日期',\n    resume: \"个人简历\",\n    trade_date: \"交易日期\",\n    open: \"开盘价\",\n    high: \"最高价\",\n    low: \"最低价\",\n    close: \"收盘价\",\n    pre_close: \"昨收价\",\n    change: \"涨跌额\",\n    pct_chg: \"涨跌幅 （未复权）\",\n    vol: \"成交量 （手）\",\n    amount: \"成交额 （千元）\",\n    adj_factor: \"复权因子\",\n    suspend_type: \"停复牌类型：S-停牌,R-复牌\",\n    suspend_timing: \"日内停牌时间段\",\n    turnover_rate: \"换手率（%）\",\n    turnover_rate_f: \"换手率（自由流通股）\",\n    volume_ratio: \"量比\",\n    pe: \"市盈率（总市值/净利润， 亏损的PE为空）\",\n    pe_ttm: \"市盈率（TTM，亏损的PE为空）\",\n    pb: \"市净率（总市值/净资产）\",\n    ps: \"市销率\",\n    ps_ttm: \"市销率（TTM）\",\n    dv_ratio: \"股息率 （%）\",\n    dv_ttm: \"股息率（TTM）（%）\",\n    total_share: \"总股本 （万股）\",\n    float_share: \"流通股本 （万股）\",\n    free_share: \"自由流通股本 （万）\",\n    total_mv: \"总市值 （万元）\",\n    circ_mv: \"流通市值（万元）\",\n};\nconst globalIndexList = [\n    { code: \"XIN9\", name: \"富时中国A50指数 (富时A50)\" },\n    { code: \"HSI\", name: \"恒生指数\" },\n    { code: \"DJI\", name: \"道琼斯工业指数\" },\n    { code: \"SPX\", name: \"标普500指数\" },\n    { code: \"IXIC\", name: \"纳斯达克指数\" },\n    { code: \"FTSE\", name: \"富时100指数\" },\n    { code: \"FCHI\", name: \"法国CAC40指数\" },\n    { code: \"GDAXI\", name: \"德国DAX指数\" },\n    { code: \"N225\", name: \"日经225指数\" },\n    { code: \"KS11\", name: \"韩国综合指数\" },\n    { code: \"AS51\", name: \"澳大利亚标普200指数\" },\n    { code: \"SENSEX\", name: \"印度孟买SENSEX指数\" },\n    { code: \"IBOVESPA\", name: \"巴西IBOVESPA指数\" },\n    { code: \"RTS\", name: \"俄罗斯RTS指数\" },\n    { code: \"TWII\", name: \"台湾加权指数\" },\n    { code: \"SPTSX\", name: \"加拿大S&P/TSX指数\" },\n];\nconst indexMarketList = [\n    // {code: \"MSCI\", name: \"MSCI指数\"},\n    { code: \"CSI\", name: \"中证指数\" },\n    { code: \"SSE\", name: \"上交所指数\" },\n    { code: \"SZSE\", name: \"深交所指数\" },\n    // {code: \"CICC\", name: \"中金指数\"},\n    // {code: \"SW\", name: \"申万指数\"},\n    // {code: \"OTH\", name: \"其他指数\"},\n];\nconst exchangeList = [\n    { code: \"SSE\", name: \"上交所\" },\n    { code: \"SZSE\", name: \"深交所\" },\n\n    // { code: \"CFFEX\", name: \"中金所\" },\n    // { code: \"SHFE\", name: \"上期所\" },\n    // { code: \"CZCE\", name: \"郑商所\" },\n    // { code: \"DCE\", name: \"大商所\" },\n    // { code: \"INE\", name: \"上能源\" },\n    // { code: \"IB\", name: \"银行间\" },\n    // { code: \"XHKG\", name: \"港交所\" },\n];\nconst apiNames = {\n    stockBasic: \"stock_basic\",\n    stockCompany: \"stock_company\",\n    stockManagers: \"stk_managers\",\n    stockRewards: \"stk_rewards\",\n    // 接口：trade_cal\n    // 描述：获取各大交易所交易日历数据,默认提取的是上交所\n    tradeCalendar: \"trade_cal\",\n    newShare: \"new_share\",\n    // 接口：daily，日线行情\n    // 数据说明：交易日每天15点～16点之间。本接口是未复权行情，停牌期间不提供数据。\n    // 描述：获取股票行情数据，或通过通用行情接口获取数据，包含了前后复权数据。\n    daily: \"daily\",\n    // 接口：adj_factor\n    // 更新时间：早上9点30分\n    // 描述：获取股票复权因子，可提取单只股票全部历史复权因子，也可以提取单日全部股票的复权因子。\n    adjustFactor: \"adj_factor\",\n    // 接口：suspend_d\n    // 更新时间：不定期\n    // 描述：按日期方式获取股票每日停复牌信息\n    suspendInfo: \"suspend_d\",\n    // 接口：daily_basic\n    // 更新时间：交易日每日15点～17点之间\n    // 描述：获取全部股票每日重要的基本面指标，可用于选股分析、报表展示等。\n    dailyBasic: \"daily_basic\",\n    // 接口：moneyflow\n    // 描述：获取沪深A股票资金流向数据，分析大单小单成交情况，用于判别资金动向\n    moneyFlow: \"moneyflow\",\n    // 接口：limit_list\n    // 描述：获取每日涨跌停股票统计，包括封闭时间和打开次数等数据，帮助用户快速定位近期强（弱）势股，以及研究超短线策略。\n    limitList: \"limit_list\",\n    // 接口：moneyflow_hsgt\n    // 描述：获取沪股通、深股通、港股通每日资金流向数据，每次最多返回300条记录，总量不限制。\n    moneyFlowHSGT: \"moneyflow_hsgt\",\n    // 接口：hsgt_top10\n    // 描述：获取沪股通、深股通每日前十大成交详细数据\n    hsgtTop10: \"hsgt_top10\",\n    // 接口：hk_hold\n    // 描述：获取沪深港股通持股明细，数据来源港交所。\n    hkHold: \"hk_hold\",\n    // 接口：ggt_daily\n    // 描述：获取港股通每日成交信息，数据从2014年开始\n    ggtDaily: \"ggt_daily\",\n    // 接口：ggt_monthly\n    // 描述：港股通每月成交信息，数据从2014年开始\n    ggtMonthly: \"ggt_monthly\",\n    // 接口：index_global\n    // 描述：获取国际主要指数日线行情\n    indexGlobal: \"index_global\",\n    // 接口：income\n    // 描述：获取上市公司财务利润表数据\n    income: \"income\",\n    //接口：balancesheet\n    //描述：获取上市公司资产负债表\n    balanceSheet: \"balancesheet\",\n    // 接口：cashflow\n    // 描述：获取上市公司现金流量表\n    cashFlow: \"cashflow\",\n    // 接口：forecast\n    // 描述：获取业绩预告数据\n    forecast: \"forecast\",\n    // 接口：express\n    // 描述：获取上市公司业绩快报\n    express: \"express\",\n    // 接口：dividend\n    // 描述：分红送股数据\n    dividend: \"dividend\",\n    // 接口：fina_indicator\n    // 描述：获取上市公司财务指标数据\n    financialIndicator: \"fina_indicator\",\n    // 接口：fina_mainbz\n    // 描述：获得上市公司主营业务构成，分地区和产品两种方式\n    financialMainbiz: \"fina_mainbz\",\n    // 接口：disclosure_date\n    // 描述：获取财报披露计划日期\n    disclosureDate: \"disclosure_date\",\n    // 接口：pledge_stat\n    // 描述：获取股票质押统计数据\n    pledgeState: \"pledge_stat\",\n    // 接口：pledge_detail\n    // 描述：获取股票质押明细数据\n    pledgeDetail: \"pledge_detail\",\n    // 接口：index_basic\n    // 描述：获取指数基础信息。\n    indexBasic: \"index_basic\",\n    // 接口：index_daily\n    // 描述：获取指数每日行情\n    indexDaily: \"index_daily\",\n    // 接口：index_weight\n    // 描述：获取各类指数成分和权重，月度数据\n    indexWeight: \"index_weight\",\n    // 接口：index_dailybasic\n    // 描述：目前只提供上证综指，深证成指，上证50，中证500，中小板指，创业板指的每日指标数据\n    indexDailyBasic: \"index_dailybasic\",\n    // 接口：index_classify\n    // 描述：获取申万行业分类，包括申万28个一级分类，104个二级分类，227个三级分类的列表信息\n    indexClassify: \"index_classify\",\n    // 接口：index_member\n    // 描述：申万行业成分\n    indexMember: \"index_member\",\n    // 接口：daily_info\n    // 描述：获取交易所股票交易统计，包括各板块明细\n    dailyInfo: \"daily_info\",\n};\n\nconst apiFields = {\n    stockBasic:\n        \"ts_code,symbol,name,area,industry,fullname,enname,market,exchange,curr_type,list_status,list_date,delist_date,is_hs\",\n    stockCompany:\n        \"ts_code,exchange,chairman,manager,secretary,reg_capital,setup_date,province,city,introduction,website,email,office,employees,main_business,business_scope\",\n    stockManagers:\n        \"ts_code,ann_date,name,gender,lev,title,edu,national,birthday,begin_date,end_date,resume\",\n    stockRewards: \"ts_code,ann_date,end_date,name,title,reward,hold_vol\",\n    tradeCalendar: \"exchange,cal_date,is_open,pretrade_date\",\n    newShare:\n        \"ts_code,sub_code,name,ipo_date,issue_date,amount,market_amount,price,pe,limit_amount,funds,ballot\",\n    daily:\n        \"ts_code,trade_date,open,high,low,close,pre_close,change,pct_chg,vol,amount\",\n    adjustFactor: \"ts_code,trade_date,adj_factor\",\n    suspendInfo: \"ts_code,trade_date,suspend_timing,suspend_type\",\n    dailyBasic:\n        \"ts_code,trade_date,close,turnover_rate,turnover_rate_f,volume_ratio,pe,pe_ttm,pb,ps,ps_ttm,dv_ratio,dv_ttm,total_share,float_share,free_share,total_mv,circ_mv\",\n    moneyFlow:\n        \"ts_code,trade_date,buy_sm_vol,buy_sm_amount,sell_sm_vol,sell_sm_amount,buy_md_vol,buy_md_amount,sell_md_vol,sell_md_amount,buy_lg_vol,buy_lg_amount,sell_lg_vol,sell_lg_amount,buy_elg_vol,buy_elg_amount,sell_elg_vol,sell_elg_amount,net_mf_vol,net_mf_amount\",\n    limitList:\n        \"ts_code,trade_date,name,close,pct_chg,amp,fc_ratio,fl_ratio,fd_amount,first_time,last_time,open_times,strth,limit\",\n    moneyFlowHSGT: \"trade_date,ggt_ss,ggt_sz,hgt,sgt,north_money,south_money\",\n    hsgtTop10:\n        \"ts_code,trade_date,name,close,change,rank,market_type,amount,net_amount,buy,sell\",\n    hkHold: \"code,trade_date,ts_code,name,vol,ratio,exchange\",\n    ggtDaily: \"trade_date,buy_amount,buy_volume,sell_amount,sell_volume\",\n    ggtMonthly:\n        \"month,day_buy_amt,day_buy_vol,day_sell_amt,day_sell_vol,total_buy_amt,total_buy_vol,total_sell_amt,total_sell_vol\",\n    indexGlobal:\n        \"ts_code,trade_date,open,close,high,low,pre_close,change,pct_chg,vol,amount\",\n\n    income:\n        \"ts_code,ann_date,f_ann_date,end_date,report_type,comp_type,basic_eps,total_revenue,revenue,int_income,prem_earned,comm_income,n_commis_income,n_oth_income,n_oth_b_income,out_prem,une_prem_reser,reins_income,n_sec_tb_income,n_sec_uw_income,n_asset_mg_income,oth_b_income,fv_value_chg_gain,invest_income,ass_invest_income,forex_gain,total_cogs,oper_cost,int_exp,comm_exp,biz_tax_surchg,sell_exp,admin_exp,fin_exp,assets_impair_loss,prem_refund,compens_payout,reser_insur_liab,div_payt,reins_exp,oper_exp,compens_payout_refu,insur_reser_refu,reins_cost_refund,other_bus_cost,operate_profit,non_oper_income,non_oper_exp,nca_disploss,total_profit,income_tax,n_income,n_income_attr_p,minority_gain,oth_compr_income,t_compr_income,compr_inc_attr_p,compr_inc_attr_m_s,ebit,ebitda,insurance_exp,undist_profit,distable_profit,update_flag\",\n    balanceShet:\n        \"ts_code,ann_date,f_ann_date,end_date,report_type,comp_type,total_share,cap_rese,undistr_porfit,surplus_rese,special_rese,money_cap,trad_asset,notes_receiv,accounts_receiv,oth_receiv,int_receiv,inventories,amor_exp,nca_within_1y,sett_rsrv,loanto_oth_bank_fi,premium_receiv,reinsur_receiv,reinsur_res_receiv,pur_resale_fa,oth_cur_assets,total_cur_assets,fa_avail_for_sale,htm_invest,lt_eqt_invest,invest_real_estate,time_deposits,oth_assets,lt_rec,fix_assets,cip,const_materials,fixed_assets_disp,produc_bio_assets,oil_and_gas_assets,intain_assets,r_and_d,goodwill,lt_amor_exp,defer_tax_assets,decr_in_disbur,oth_nca,total_nca,cash_reser_cb,depos_in_oth_bfi,prec_metals,deriv_assets,rr_reins_une_prem,rr_reins_outstd_cla,rr_reins_lins_liab,rr_reins_lthins_liab,refund_depos,ph_pledge_loans,refund_cap_depos,indep_acct_assets,client_depos,client_prov,transac_seat_fee,invest_as_receiv,total_assets,lt_borr,st_borr,cb_borr,depos_ib_deposits,loan_oth_bank,trading_fl,notes_payable,acct_payable,adv_receipts,sold_for_repur_fa,comm_payable,payroll_payable,taxes_payable,int_payable,div_payable,oth_payable,acc_exp,deferred_inc,st_bonds_payable,payable_to_reinsurer,rsrv_insur_cont,acting_trading_sec,acting_uw_sec,non_cur_liab_due_1y,oth_cur_liab,total_cur_liab,bond_payable,lt_payable,specific_payables,estimated_liab,defer_tax_liab,defer_inc_non_cur_liab,oth_ncl,total_ncl,depos_oth_bfi,deriv_liab,depos,agency_bus_liab,oth_liab,prem_receiv_adva,depos_received,ph_invest,reser_une_prem,reser_outstd_claims,reser_lins_liab,reser_lthins_liab,indept_acc_liab,pledge_borr,indem_payable,policy_div_payable,total_liab,treasury_share,ordin_risk_reser,forex_differ,invest_loss_unconf,minority_int,total_hldr_eqy_exc_min_int,total_hldr_eqy_inc_min_int,total_liab_hldr_eqy,lt_payroll_payable,oth_comp_income,oth_eqt_tools,oth_eqt_tools_p_shr,lending_funds,acc_receivable,st_fin_payable,payables,hfs_assets,hfs_sales,update_flag\",\n    cashflow:\n        \"ts_code,ann_date,f_ann_date,end_date,comp_type,report_type,net_profit,finan_exp,c_fr_sale_sg,recp_tax_rends,n_depos_incr_fi,n_incr_loans_cb,n_inc_borr_oth_fi,prem_fr_orig_contr,n_incr_insured_dep,n_reinsur_prem,n_incr_disp_tfa,ifc_cash_incr,n_incr_disp_faas,n_incr_loans_oth_bank,n_cap_incr_repur,c_fr_oth_operate_a,c_inf_fr_operate_a,c_paid_goods_s,c_paid_to_for_empl,c_paid_for_taxes,n_incr_clt_loan_adv,n_incr_dep_cbob,c_pay_claims_orig_inco,pay_handling_chrg,pay_comm_insur_plcy,oth_cash_pay_oper_act,st_cash_out_act,n_cashflow_act,oth_recp_ral_inv_act,c_disp_withdrwl_invest,c_recp_return_invest,n_recp_disp_fiolta,n_recp_disp_sobu,stot_inflows_inv_act,c_pay_acq_const_fiolta,c_paid_invest,n_disp_subs_oth_biz,oth_pay_ral_inv_act,n_incr_pledge_loan,stot_out_inv_act,n_cashflow_inv_act,c_recp_borrow,proc_issue_bonds,oth_cash_recp_ral_fnc_act,stot_cash_in_fnc_act,free_cashflow,c_prepay_amt_borr,c_pay_dist_dpcp_int_exp,incl_dvd_profit_paid_sc_ms,oth_cashpay_ral_fnc_act,stot_cashout_fnc_act,n_cash_flows_fnc_act,eff_fx_flu_cash,n_incr_cash_cash_equ,c_cash_equ_beg_period,c_cash_equ_end_period,c_recp_cap_contrib,incl_cash_rec_saims,uncon_invest_loss,prov_depr_assets,depr_fa_coga_dpba,amort_intang_assets,lt_amort_deferred_exp,decr_deferred_exp,incr_acc_exp,loss_disp_fiolta,loss_scr_fa,loss_fv_chg,invest_loss,decr_def_inc_tax_assets,incr_def_inc_tax_liab,decr_inventories,decr_oper_payable,incr_oper_payable,others,im_net_cashflow_oper_act,conv_debt_into_cap,conv_copbonds_due_within_1y,fa_fnc_leases,end_bal_cash,beg_bal_cash,end_bal_cash_equ,beg_bal_cash_equ,im_n_incr_cash_equ,update_flag\",\n    forecast:\n        \"ts_code,ann_date,end_date,type,p_change_min,p_change_max,net_profit_min,net_profit_max,last_parent_net,first_ann_date,summary,change_reason\",\n    express:\n        \"ts_code,ann_date,end_date,revenue,operate_profit,total_profit,n_income,total_assets,total_hldr_eqy_exc_min_int,diluted_eps,diluted_roe,yoy_net_profit,bps,yoy_sales,yoy_op,yoy_tp,yoy_dedu_np,yoy_eps,yoy_roe,growth_assets,yoy_equity,growth_bps,or_last_year,op_last_year,tp_last_year,np_last_year,eps_last_year,open_net_assets,open_bps,perf_summary,is_audit,remark\",\n    dividend:\n        \"ts_code,end_date,ann_date,div_proc,stk_div,stk_bo_rate,stk_co_rate,cash_div,cash_div_tax,record_date,ex_date,pay_date,div_listdate,imp_ann_date,base_date,base_share\",\n    financialIndicator:\n        \"ts_code,ann_date,end_date,eps,dt_eps,total_revenue_ps,revenue_ps,capital_rese_ps,surplus_rese_ps,undist_profit_ps,extra_item,profit_dedt,gross_margin,current_ratio,quick_ratio,cash_ratio,invturn_days,arturn_days,inv_turn,ar_turn,ca_turn,fa_turn,assets_turn,op_income,valuechange_income,interst_income,daa,ebit,ebitda,fcff,fcfe,current_exint,noncurrent_exint,interestdebt,netdebt,tangible_asset,working_capital,networking_capital,invest_capital,retained_earnings,diluted2_eps,bps,ocfps,retainedps,cfps,ebit_ps,fcff_ps,fcfe_ps,netprofit_margin,grossprofit_margin,cogs_of_sales,expense_of_sales,profit_to_gr,saleexp_to_gr,adminexp_of_gr,finaexp_of_gr,impai_ttm,gc_of_gr,op_of_gr,ebit_of_gr,roe,roe_waa,roe_dt,roa,npta,roic,roe_yearly,roa2_yearly,roe_avg,opincome_of_ebt,investincome_of_ebt,n_op_profit_of_ebt,tax_to_ebt,dtprofit_to_profit,salescash_to_or,ocf_to_or,ocf_to_opincome,capitalized_to_da,debt_to_assets,assets_to_eqt,dp_assets_to_eqt,ca_to_assets,nca_to_assets,tbassets_to_totalassets,int_to_talcap,eqt_to_talcapital,currentdebt_to_debt,longdeb_to_debt,ocf_to_shortdebt,debt_to_eqt,eqt_to_debt,eqt_to_interestdebt,tangibleasset_to_debt,tangasset_to_intdebt,tangibleasset_to_netdebt,ocf_to_debt,ocf_to_interestdebt,ocf_to_netdebt,ebit_to_interest,longdebt_to_workingcapital,ebitda_to_debt,turn_days,roa_yearly,roa_dp,fixed_assets,profit_prefin_exp,non_op_profit,op_to_ebt,nop_to_ebt,ocf_to_profit,cash_to_liqdebt,cash_to_liqdebt_withinterest,op_to_liqdebt,op_to_debt,roic_yearly,total_fa_trun,profit_to_op,q_opincome,q_investincome,q_dtprofit,q_eps,q_netprofit_margin,q_gsprofit_margin,q_exp_to_sales,q_profit_to_gr,q_saleexp_to_gr,q_adminexp_to_gr,q_finaexp_to_gr,q_impair_to_gr_ttm,q_gc_to_gr,q_op_to_gr,q_roe,q_dt_roe,q_npta,q_opincome_to_ebt,q_investincome_to_ebt,q_dtprofit_to_profit,q_salescash_to_or,q_ocf_to_sales,q_ocf_to_or,basic_eps_yoy,dt_eps_yoy,cfps_yoy,op_yoy,ebt_yoy,netprofit_yoy,dt_netprofit_yoy,ocf_yoy,roe_yoy,bps_yoy,assets_yoy,eqt_yoy,tr_yoy,or_yoy,q_gr_yoy,q_gr_qoq,q_sales_yoy,q_sales_qoq,q_op_yoy,q_op_qoq,q_profit_yoy,q_profit_qoq,q_netprofit_yoy,q_netprofit_qoq,equity_yoy,rd_exp,update_flag\",\n    financialMainbiz:\n        \"ts_code,end_date,bz_item,bz_sales,bz_profit,bz_cost,curr_type,update_flag\",\n    disclosureDate:\n        \"ts_code,ann_date,end_date,pre_date,actual_date,modify_date\",\n    pledgeState:\n        \"ts_code,end_date,pledge_count,unrest_pledge,rest_pledge,total_share,pledge_ratio\",\n    pledgeDetail:\n        \"ts_code,ann_date,holder_name,pledge_amount,start_date,end_date,is_release,release_date,pledgor,holding_amount,pledged_amount,p_total_ratio,h_total_ratio,is_buyback\",\n\n    indexBasic:\n        \"ts_code,name,fullname,market,publisher,index_type,category,base_date,base_point,list_date,weight_rule,desc,exp_date\",\n    indexDaily:\n        \"ts_code,trade_date,close,open,high,low,pre_close,change,pct_chg,vol,amount\",\n    indexWeight: \"index_code,con_code,trade_date,weight\",\n    indexDailyBasic:\n        \"ts_code,trade_date,total_mv,float_mv,total_share,float_share,free_share,turnover_rate,turnover_rate_f,pe,pe_ttm,pb\",\n    indexClassify: \"index_code,industry_name,level,industry_code\",\n    indexMember:\n        \"index_code,index_name,con_code,con_name,in_date,out_date,is_new\",\n    dailyInfo:\n        \"trade_date,ts_code,ts_name,com_count,total_share,float_share,total_mv,float_mv,amount,vol,trans_count,pe,tr,exchange\",\n};\n\n// 每个api_name对应一组流控参数，如果没有配置，则认为不需要流控，\n// 或者统一放在一个默认流控池中控制\nconst DEFAULT_FLOWCONTROL_NAME = \"默认\";\nconst FLOW_CONFIG = {\n    [apiNames.daily]: { maxFlow: 500 },\n    [apiNames.indexDaily]: { maxFlow: 300 },\n    [apiNames.adjustFactor]: { maxFlow: 500 },\n    [apiNames.dailyBasic]: { maxFlow: 400 },\n    [apiNames.financialMainbiz]: { maxFlow: 60 },\n    [apiNames.financialIndicator]: { maxFlow: 200 },\n    [apiNames.forecast]: { maxFlow: 200 },\n    [apiNames.cashFlow]: { maxFlow: 200 },\n    [apiNames.balanceSheet]: { maxFlow: 200 },\n    [apiNames.disclosureDate]: { maxFlow: 200 },\n    [apiNames.income]: { maxFlow: 200 },\n    [apiNames.dividend]: { maxFlow: 300 },\n    [apiNames.pledgeDetail]: { maxFlow: 200 },\n    [apiNames.moneyFlow]: { maxFlow: 300 },\n    [DEFAULT_FLOWCONTROL_NAME]: { maxFlow: 200 },\n};\n\nfunction initFlowControl() {\n    let tmp = {};\n    for (let api in FLOW_CONFIG) {\n        if (Object.prototype.hasOwnProperty.call(FLOW_CONFIG, api)) {\n            tmp[api] = new FlowControl(\n                FLOW_CONFIG[api].maxFlow,\n                `接口${api}流控`\n            );\n            logger.debug(`创建流控 接口${api}, %o`, tmp[api]);\n        }\n    }\n    return tmp;\n}\nconst flowControls = initFlowControl();\n\n// 请求计数\nlet requestCount = 0;\nlet responseCount = 0;\nlet errorCount = 0;\n\n/**\n *\n * @param {string} api 发起请求的接口名称\n * @param {object} params 接口参数\n * @param {string} fields 返回字段列表，逗号分割字符串\n * @param {Function} hasMoreParams 如果接口返回hasMore，使用该方法计算获取下一次数据的参数，方法传入上一次参数和本次返回数据，不设置则不支持hasMore\n * @param {Function} moreDatas 在支持hasMore后，返回数据和之前数据的合并处理方法，传入之前的数据和这一次返回数据，返回合并结果，不设置则按照数组自动添加在后面\n */\n// eslint-disable-next-line max-params\nasync function queryData(\n    api = \"\",\n    params = {},\n    fields = \"\",\n    hasMoreParams = null,\n    moreDatas = null\n) {\n    if (!api && api === \"\") {\n        throw new Error(\"未指定接口api名称！\");\n    }\n    // logger.log(\"tushare query data:\", api, params)\n    // logger.log(\"env: \", process.env)\n\n    // await sleep(1000 / 800)\n    // console.count(\"queryData\");\n    logger.debug(\n        \"%s 发送请求，%s, %o\",\n        moment().format(\"h:mm:ss\"),\n        api,\n        params\n    );\n    requestCount++;\n\n    // 流控添加到axios发起时触发，流控池由api_name进行分组\n    let fc = flowControls[api];\n    if (!fc) {\n        fc = flowControls[DEFAULT_FLOWCONTROL_NAME];\n    }\n    // logger.debug(\"use flow control: \", api, fc, typeof fc)\n    try {\n        const response = await fc.call(axios.post, tushareUrl, {\n            api_name: api,\n            token: process.env.TUSHARE_TOKEN,\n            params,\n            fields: fields,\n        });\n\n        responseCount++;\n        if (response && response.data && response.data.code === 0) {\n            let fields = response.data.data.fields;\n            let items = response.data.data.items;\n            let hasMore = response.data.data.has_more;\n\n            logger.debug(\n                \"收到服务器响应：字段数量=%d, 数据长度=%d，是否还有更多数据：%s；请求信息 %s，%o\",\n                fields.length,\n                items.length,\n                hasMore,\n                api,\n                params\n            );\n            let data = await constructData({ fields, items });\n            // logger.log(\"constructed data:\", data.length)\n\n            // 这里考虑在hasMore为true，并且传入了hasMoreParams方法的情况下执行更多数据获取的逻辑\n            if (hasMore && hasMoreParams && _.isFunction(hasMoreParams)) {\n                let nextParams = await hasMoreParams(params, data);\n                logger.debug(\n                    \"有更多数据需要获取：%o, %o, %d\",\n                    params,\n                    nextParams,\n                    data && data.length\n                );\n                // 如果无法设置参数，会返回空，这里就不再继续获取\n                if (nextParams) {\n                    let moreRetData = await queryData(\n                        api,\n                        nextParams,\n                        fields,\n                        hasMoreParams,\n                        moreDatas\n                    );\n                    hasMore = moreRetData && moreRetData.hasMore;\n                    let moreData = moreRetData && moreRetData.data;\n\n                    if (moreDatas && _.isFunction(moreDatas)) {\n                        logger.debug(\n                            \"更多数据调用合并: %d && %d\",\n                            data.length,\n                            moreData.length\n                        );\n                        data = await moreDatas(data, moreData && moreData.data);\n                    } else {\n                        logger.debug(\n                            \"更多数据自动合并: %d && %d\",\n                            data.length,\n                            moreData.length\n                        );\n                        data.push(...moreData);\n                    }\n                } else {\n                    hasMore = false;\n                }\n            }\n\n            return {\n                data,\n                hasMore,\n            };\n        }\n        errorCount++;\n        logger.error(\n            \"发现错误(请求信息 %s, %o)：%s, %s\",\n            api,\n            params,\n            response.data.code,\n            response.data.msg\n        );\n        throw new Error(\n            \"接口返回错误[\" + response.data.code + \"]:\" + response.data.msg\n        );\n    } catch (error) {\n        logger.error(`数据接口处理过程发生未知异常：${error}`);\n        throw error;\n    }\n}\n\n/**\n * 重构接口返回数据\n * @param {Array} data http接口返回数据\n */\nasync function constructData(data) {\n    if (!data || data.length <= 0) return data;\n    let fields = data.fields;\n    let items = data.items;\n    let tmp = [];\n    if (!fields || fields.length === 0 || !items || items.length === 0) {\n        return tmp;\n    }\n\n    for (let itemIndex = 0; itemIndex < items.length; itemIndex++) {\n        let tmpItem = {};\n        for (let fieldIndex = 0; fieldIndex < fields.length; fieldIndex++) {\n            tmpItem[fields[fieldIndex]] = items[itemIndex][fieldIndex];\n        }\n        tmp.push(tmpItem);\n    }\n    return tmp;\n}\n\nasync function stockBasic(exchange = \"\", listStatus = \"L\") {\n    try {\n        let data = await queryData(\n            apiNames.stockBasic,\n            {\n                exchange,\n                list_status: listStatus,\n            },\n            apiFields.stockBasic\n        );\n        return data && data.data;\n    } catch (error) {\n        logger.error(`查询股票列表发生未知异常：${error}`);\n        return [];\n    }\n}\n\nasync function stockCompany(tsCode, exchange) {\n    if (_.isEmpty(tsCode)) return new Error(\"公司基本信息未指定代码\");\n    if (_.isEmpty(exchange)) return new Error(\"公司基本信息未指定交易所\");\n\n    let data = await queryData(\n        apiNames.stockCompany,\n        {\n            ts_code: tsCode,\n            exchange,\n        },\n        apiFields.stockCompany\n    );\n    return data && data.data;\n}\n\nasync function stockManagers(tsCode = \"\", annDate = \"\", startDate, endDate) {\n    if (\n        _.isEmpty(tsCode) &&\n        _.isEmpty(annDate) &&\n        _.isEmpty(startDate) &&\n        _.isEmpty(endDate)\n    ) {\n        return new Error(\"上市公司管理层参数设置错误！\");\n    }\n\n    let data = await queryData(\n        apiNames.stockManagers,\n        {\n            ts_code: tsCode,\n            ann_date: annDate,\n            start_date: startDate,\n            end_date: endDate,\n        },\n        apiFields.stockManagers\n    );\n    return data && data.data;\n}\n\nconst stockInfo2Params = {\n    dividend: {\n        name: \"dividend\",\n        api: apiNames.dividend,\n    },\n    pledgeStat: {\n        name: \"pledgeStat\",\n        api: apiNames.pledgeState,\n    },\n    pledgeDetail: {\n        name: \"pledgeDetail\",\n        api: apiNames.pledgeDetail,\n    },\n};\n\nasync function queryStockInfo2(dataName, tsCode) {\n    let stockParams = stockInfo2Params[dataName];\n\n    if (!stockParams) {\n        return new Error(\"没有设置要调取的接口名称或者接口不支持！\");\n    }\n\n    let apiName = stockParams.api;\n    if (_.isEmpty(tsCode)) return new Error(\"个股信息未指定代码\");\n\n    let data = await queryData(\n        apiName,\n        {\n            ts_code: tsCode,\n        },\n        apiFields[apiName]\n    );\n    return data && data.data;\n}\n\n/**\n * 获取指定日期的所有停复盘股票信息\n * @param {string} tradeDate 交易日期 YYYYMMDD\n */\nasync function suspendList(tradeDate) {\n    if (_.isEmpty(tradeDate)) {\n        tradeDate = moment().format(\"YYYYMMDD\");\n    }\n\n    try {\n        let data = await queryData(\n            apiNames.suspendInfo,\n            {\n                trade_date: tradeDate,\n            },\n            apiFields.suspendInfo\n        );\n        return data && data.data;\n    } catch (error) {\n        logger.error(`查询指定日期全部停复盘信息发生未知异常：${error}`);\n        return [];\n    }\n}\n\n/**\n * 获取指定日期的全部股票的基本面指标，如果日期未设置，则取今日指标\n * @param {string} tradeDate 数据日期\n */\nasync function dailyBasicList(tradeDate = null) {\n    if (_.isEmpty(tradeDate)) {\n        tradeDate = moment().format(\"YYYYMMDD\");\n    }\n\n    try {\n        let data = await queryData(\n            apiNames.dailyBasic,\n            {\n                trade_date: tradeDate,\n            },\n            apiFields.dailyBasic\n        );\n        return data && data.data;\n    } catch (error) {\n        logger.error(`查询指定日期全部股票基本面信息发生未知异常：${error}`);\n        return [];\n    }\n}\n\n/**\n * 根据提供的市场/发布商获取指数基础信息列表\n * @param {string} market 市场/发布商\n */\nasync function indexBasic(market) {\n    if (_.isEmpty(market)) {\n        return new Error(\"获取指数信息列表需要设置市场或服务商\");\n    }\n\n    try {\n        let data = await queryData(\n            apiNames.indexBasic,\n            {\n                market,\n            },\n            apiFields.indexBasic\n        );\n\n        return data && data.data;\n    } catch (error) {\n        logger.error(`查询指数基础信息列表发生未知异常：${error}`);\n        return [];\n    }\n}\n\n/**\n * 查询指定交易所的交易日历数据\n * @param {string} exchange 交易所代码\n * @param {string} startDate 查询开始日期，YYYYMMDD\n * @param {string} endDate 查询结束日期，YYYYMMDD\n */\nasync function tradeCalendar(exchange, startDate = null, endDate = null) {\n    if (_.isEmpty(exchange)) {\n        return new Error(apiNames.tradeCalendar + \"需要设置查询的交易所代码\");\n    }\n    try {\n        let data = await queryData(\n            apiNames.tradeCalendar,\n            {\n                exchange,\n                start_date: startDate,\n                end_date: endDate,\n            },\n            apiFields.tradeCalendar,\n            async (params, retData) => {\n                if (retData && retData.length > 0) {\n                    let lastDate = moment(\n                        retData[retData.length - 1].cal_date,\n                        \"YYYYMMDD\"\n                    );\n                    return {\n                        exchange,\n                        start_date: startDate,\n                        end_date: lastDate\n                            .subtract(1, \"days\")\n                            .format(\"YYYYMMDD\"),\n                    };\n                }\n                return null;\n            }\n        );\n        return data && data.data;\n    } catch (error) {\n        logger.error(`查询交易所日历数据发生未知异常：${error}`);\n        return [];\n    }\n}\n\n/**\n * 可以支持queryStockInfo接口的参数配置\n */\nconst stockInfoParams = {\n    daily: {\n        name: \"daily\",\n        api: apiNames.daily,\n        returnDateFiled: \"trade_date\",\n    },\n    adjustFactor: {\n        name: \"adjustFactor\",\n        api: apiNames.adjustFactor,\n        returnDateFiled: \"trade_date\",\n    },\n    suspendInfo: {\n        name: \"suspendInfo\",\n        api: apiNames.suspendInfo,\n        returnDateFiled: \"trade_date\",\n    },\n    dailyBasic: {\n        name: \"dailyBasic\",\n        api: apiNames.dailyBasic,\n        returnDateFiled: \"trade_date\",\n    },\n    moneyFlow: {\n        name: \"moneyFlow\",\n        api: apiNames.moneyFlow,\n        returnDateFiled: \"trade_date\",\n    },\n    // indexDailyBasic: { name: \"indexDailyBasic\", api: apiNames.indexDailyBasic, returnDateFiled: \"trade_date\",},\n    indexDaily: {\n        name: \"indexDaily\",\n        api: apiNames.indexDaily,\n        returnDateFiled: \"trade_date\",\n    },\n    income: {\n        name: \"income\",\n        api: apiNames.income,\n        returnDateFiled: \"ann_date\",\n    },\n    balanceSheet: {\n        name: \"balanceSheet\",\n        api: apiNames.balanceSheet,\n        returnDateFiled: \"ann_date\",\n    },\n    cashFlow: {\n        name: \"cashFlow\",\n        api: apiNames.cashFlow,\n        returnDateFiled: \"ann_date\",\n    },\n    forecast: {\n        name: \"forecast\",\n        api: apiNames.forecast,\n        returnDateFiled: \"ann_date\",\n    },\n    express: {\n        name: \"express\",\n        api: apiNames.express,\n        returnDateFiled: \"ann_date\",\n    },\n    dividend: {\n        name: \"dividend\",\n        api: apiNames.dividend,\n        returnDateFiled: \"end_date\",\n    },\n    financialIndicator: {\n        name: \"financialIndicator\",\n        api: apiNames.financialIndicator,\n        returnDateFiled: \"ann_date\",\n    },\n    financialMainbiz: {\n        name: \"financialMainbiz\",\n        api: apiNames.financialMainbiz,\n        returnDateFiled: \"end_date\",\n    },\n    disclosureDate: { name: \"disclosureDate\", api: apiNames.disclosureDate },\n};\n\nconst stockDataNames = {\n    daily: \"daily\",\n    adjustFactor: \"adjustFactor\",\n    suspendInfo: \"suspendInfo\",\n    dailyBasic: \"dailyBasic\",\n    moneyFlow: \"moneyFlow\",\n    // indexDailyBasic: \"indexDailyBasic\",\n    indexDaily: \"indexDaily\",\n    income: \"income\",\n    balanceSheet: \"balanceSheet\",\n    cashFlow: \"cashFlow\",\n    forecast: \"forecast\",\n    express: \"express\",\n    financialIndicator: \"financialIndicator\",\n    financialMainbiz: \"financialMainbiz\",\n    disclosureDate: \"disclosureDate\",\n\n    dividend: \"dividend\",\n    pledgeStat: \"pledgeStat\",\n    pledgeDetail: \"pledgeDetail\",\n};\n\n/**\n * 符合使用代码，开始日期，结束日期查询接口的通用访问，比较适合于个股数据\n * @param {string} apiName 接口名称，可以用apiNames常量表获取\n * @param {string} tsCode 代码，不一定是股票代码，也可能是市场代码或其它\n * @param {string} startDate 查询开始日期，YYYYMMDD\n * @param {string} endDate 查询结束日期，YYYYMMDD\n * @param {string} returnDateFiled 返回数据中用于确定处理更多数据时候使用的日期字段，默认为trade_date\n * @returns {Array} 返回查询到的全部数据，以及对应的最近和最早的两个日期\n */\nasync function queryStockInfo(\n    dataName,\n    tsCode,\n    startDate = null,\n    endDate = null\n) {\n    if (stockInfo2Params[dataName]) {\n        return queryStockInfo2(dataName, tsCode);\n    }\n\n    let stockParams = stockInfoParams[dataName];\n    // let isStockInfo = !!queryStockInfoApiNames[dataName];\n    // let isStockFinancialInfo = !!queryStockFinancialInfoApiNames[dataName];\n\n    if (!stockParams) {\n        return new Error(\"没有设置要调取的接口名称或者接口不支持！\");\n    }\n\n    let apiName = stockParams.api;\n    // queryStockInfoApiNames[dataName] ||\n    // queryStockFinancialInfoApiNames[dataName];\n    if (_.isEmpty(tsCode)) {\n        return new Error(dataName + \"需要设置查询的代码\");\n    }\n    if (_.isEmpty(startDate)) {\n        // 需要设置开始日期\n        startDate = \"19901101\";\n    }\n    if (_.isEmpty(endDate)) {\n        endDate = moment().format(\"YYYYMMDD\");\n    }\n\n    let returnField = stockParams.returnDateFiled; // returnDateFields[dataName];\n    logger.debug(\n        `个股数据参数：${dataName}, ${tsCode}, %o, ${apiName}, ${startDate}, ${endDate}, ${returnField}`,\n        stockParams\n    );\n\n    try {\n        let data = await queryData(\n            apiName,\n            {\n                ts_code: tsCode,\n                start_date: startDate,\n                end_date: endDate,\n            },\n            apiFields[apiName],\n            async (params, retData) => {\n                if (retData && retData.length > 0) {\n                    logger.debug(\n                        `处理日期，${returnField}, %o`,\n                        retData[retData.length - 1]\n                    );\n                    let lastDate = moment(\n                        retData[retData.length - 1][returnField],\n                        \"YYYYMMDD\"\n                    );\n                    return {\n                        ts_code: tsCode,\n                        start_date: startDate,\n                        end_date: lastDate\n                            .subtract(1, \"days\")\n                            .format(\"YYYYMMDD\"),\n                    };\n                }\n                return null;\n            }\n        );\n        return [\n            data && data.data,\n            // 最新日期, end_date\n            data && (data.data.length > 0 ? data.data[0][returnField] : null),\n            // 最早日期, start_date\n            data &&\n                (data.data.length > 0\n                    ? data.data[data.data.length - 1][returnField]\n                    : null),\n        ];\n    } catch (error) {\n        logger.error(`查询股票数据发生未知异常：${error}`);\n        return [[], null, null];\n    }\n}\n\nfunction showInfo() {\n    return `共发送请求${requestCount}个，收到${responseCount}个返回，其中${errorCount}个错误`;\n}\n\n// export default\nmodule.exports = {\n    stockBasic,\n    stockCompany,\n    stockManagers,\n    // stockDividend,\n    suspendList,\n    dailyBasicList,\n    indexBasic,\n    tradeCalendar,\n    queryStockInfo,\n    exchangeList,\n    globalIndexList,\n    indexMarketList,\n    fieldNames,\n    stockDataNames,\n    showInfo,\n\n    // stockDaily,\n    // dailyBasic,\n    // adjustFactor,\n    // indexDaily,\n    // stockInfoParams,\n};\n"],"names":["axios","require","_","moment","FlowControl","logger","pino","level","process","env","LOGGER","prettyPrint","levelFirst","translateTime","crlf","prettifier","apiNames","apiFields","stockBasic","stockCompany","stockManagers","stockRewards","tradeCalendar","newShare","daily","adjustFactor","suspendInfo","dailyBasic","moneyFlow","limitList","moneyFlowHSGT","hsgtTop10","hkHold","ggtDaily","ggtMonthly","indexGlobal","income","balanceShet","cashflow","forecast","express","dividend","financialIndicator","financialMainbiz","disclosureDate","pledgeState","pledgeDetail","indexBasic","indexDaily","indexWeight","indexDailyBasic","indexClassify","indexMember","dailyInfo","FLOW_CONFIG","maxFlow","flowControls","tmp","api","Object","prototype","hasOwnProperty","call","debug","initFlowControl","requestCount","responseCount","errorCount","async","queryData","params","fields","hasMoreParams","moreDatas","Error","format","fc","response","post","api_name","token","TUSHARE_TOKEN","data","code","items","hasMore","has_more","length","itemIndex","tmpItem","fieldIndex","push","constructData","isFunction","nextParams","moreRetData","moreData","error","msg","stockInfo2Params","name","pledgeStat","stockInfoParams","returnDateFiled","balanceSheet","cashFlow","module","exports","exchange","listStatus","list_status","tsCode","isEmpty","ts_code","annDate","startDate","endDate","ann_date","start_date","end_date","suspendList","tradeDate","trade_date","dailyBasicList","market","retData","lastDate","cal_date","subtract","queryStockInfo","dataName","stockParams","apiName","queryStockInfo2","returnField","exchangeList","globalIndexList","indexMarketList","fieldNames","is_hs","symbol","area","industry","fullname","enname","curr_type","list_date","delist_date","is_open","pretrade_date","change_reason","chairman","manager","secretary","reg_capital","setup_date","province","city","introduction","website","email","office","employees","main_business","business_scope","gender","lev","title","edu","national","birthday","begin_date","resume","open","high","low","close","pre_close","change","pct_chg","vol","amount","adj_factor","suspend_type","suspend_timing","turnover_rate","turnover_rate_f","volume_ratio","pe","pe_ttm","pb","ps","ps_ttm","dv_ratio","dv_ttm","total_share","float_share","free_share","total_mv","circ_mv","stockDataNames","showInfo"],"mappings":"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"}